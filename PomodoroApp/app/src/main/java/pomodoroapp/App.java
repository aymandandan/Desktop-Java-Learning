/*
 * This source file was generated by the Gradle 'init' task
 */
package pomodoroapp;

import java.awt.AWTException;
import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.TrayIcon.MessageType;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;

public class App extends Application {
    private int timeLeft;
    private Timeline timeline;
    private boolean inWorkSession = true;

    @Override
    public void start(Stage primaryStage) {
        Label timerLabel = new Label("00:00");
        timerLabel.setStyle("-fx-font-size: 24px;");

        Spinner<Integer> workInputSpinner = new Spinner<>(1, 120, 25);
        Spinner<Integer> breakInputSpinner = new Spinner<>(1, 60, 5);

        workInputSpinner.setEditable(true);
        breakInputSpinner.setEditable(true);

        HBox configBox = new HBox(10,
                new Label("Work (min):"), workInputSpinner,
                new Label("Break (min):"), breakInputSpinner);
        configBox.setAlignment(Pos.CENTER);

        Button startButton = new Button("Start");
        Button resetButton = new Button("Reset");

        startButton.setOnAction(_ -> startTimer(timerLabel, workInputSpinner.getValue(), breakInputSpinner.getValue()));
        resetButton.setOnAction(_ -> resetTimer(timerLabel));

        HBox buttonsBox = new HBox(10, startButton, resetButton);
        buttonsBox.setAlignment(Pos.CENTER);

        VBox root = new VBox(20, configBox, timerLabel, buttonsBox);
        root.setStyle("-fx-alignment: center; -fx-padding: 20;");

        Scene scene = new Scene(root, 500, 250);
        primaryStage.setScene(scene);
        primaryStage.setTitle("Pomodoro Timer");
        primaryStage.show();

    }

    private void startTimer(Label timerLabel, int workMinutes, int breakMinutes) {
        if (timeline != null && timeline.getStatus() == Timeline.Status.RUNNING) {
            return; // already running
        }
        timeLeft = (inWorkSession ? workMinutes : breakMinutes) * 60;
        timerLabel.setText(formatTime(timeLeft));

        timeline = new Timeline(new KeyFrame(Duration.seconds(1), _ -> {
            timeLeft--;
            timerLabel.setText(formatTime(timeLeft));

            if (timeLeft <= 0) {
                timeline.stop();
                playSound();
                inWorkSession = !inWorkSession; // switch session
                String next = inWorkSession ? "Break" : "Work";
                timerLabel.setText("Time's up! Next session: " + next);
                Platform.runLater(() -> {
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Pomodoro Finished");
                    alert.setHeaderText(null);
                    alert.setContentText("Time's up! Take a break.");
                    alert.showAndWait();
                    showSystemNotification("Time's up!", "Next session: " + next);
                });
            }
        }));
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.play();
    }

    private void resetTimer(Label timerLabel) {
        if (timeline != null) {
            timeline.stop();
        }
        inWorkSession = true;
        timerLabel.setText("00:00");
    }

    private void showSystemNotification(String title, String message) {
        if (SystemTray.isSupported()) {
            SystemTray tray = SystemTray.getSystemTray();
            Image image = Toolkit.getDefaultToolkit().createImage("Icon.png"); // path to your icon

            TrayIcon trayIcon = new TrayIcon(image, "Pomodoro Timer");
            trayIcon.setImageAutoSize(true);
            trayIcon.setToolTip("Pomodoro Timer");
            try {
                tray.add(trayIcon);
                trayIcon.displayMessage(title, message, MessageType.INFO);
                tray.remove(trayIcon); // remove after showing
            } catch (AWTException e) {
                e.printStackTrace();
            }
        }
    }

    private String formatTime(int seconds) {
        int minutes = seconds / 60;
        int secs = seconds % 60;
        return String.format("%02d:%02d", minutes, secs);
    }

    private void playSound() {
        Toolkit.getDefaultToolkit().beep();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
